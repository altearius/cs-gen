rules:
  import/order:
    - error
    - newlines-between: always

  import/no-unresolved: error

  # This rule is turned off because it conflicts with
  # @typescript-eslint/strict-boolean-expressions
  no-extra-boolean-cast: off
  '@typescript-eslint/strict-boolean-expressions': off

  # The philosophy of this file is that we should follow the recommended
  # rulesets provided by ESLint and TypeScript-ESLint, even accepting that
  # updates to the linter or plugins may result in new errors being reported.
  #
  # These are rules that are turned off because the TypeScript compiler provides
  # equivalent checks:
  constructor-super: off
  no-const-assign: off
  no-fallthrough: off
  no-this-before-super: off
  no-undef: off
  no-unused-labels: off
  no-unused-vars: off
  '@typescript-eslint/no-unused-vars': off

  # Possible Errors
  #
  # These rules relate to possible syntax or logic errors in
  # JavaScript code:
  no-promise-executor-return: error
  no-template-curly-in-string: error
  no-unreachable-loop: error
  require-atomic-updates: error

  # Best Practices
  #
  # These rules relate to better ways of doing things to help you
  # avoid problems:
  accessor-pairs: error
  array-callback-return: error
  block-scoped-var: error
  complexity: error
  curly: error
  default-case: error
  default-case-last: error
  eqeqeq: error
  grouped-accessor-pairs: error
  guard-for-in: error
  max-classes-per-file: error
  no-caller: error
  no-div-regex: error
  no-else-return: error
  no-empty-pattern: error
  no-eq-null: error
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-extra-label: error
  no-floating-decimal: error
  no-implicit-coercion: error
  no-implicit-globals: error
  no-iterator: error
  no-labels: error
  no-lone-blocks: error
  no-multi-str: error
  no-new: error
  no-new-func: error
  no-new-wrappers: error
  no-octal-escape: error
  no-param-reassign: error
  no-proto: error
  no-restricted-properties: error
  no-return-assign: error
  no-script-url: error
  no-self-assign: error
  no-self-compare: error
  no-sequences: error
  no-unmodified-loop-condition: error
  no-useless-call: error
  no-useless-concat: error
  no-useless-return: error
  no-with: error
  prefer-named-capture-group: error
  prefer-promise-reject-errors: error
  prefer-regex-literals: error
  radix: error
  require-unicode-regexp: error
  vars-on-top: error
  wrap-iife: [error, inside]
  yoda: error

  # Strict Mode
  #
  # These rules relate to strict mode directives:
  strict: error

  # Variables
  #
  # These rules relate to variable declarations:
  no-label-var: error
  no-restricted-globals: error
  no-undef-init: error

  # Stylistic Issues
  #
  # These rules relate to style guidelines, and are therefore
  # quite subjective.
  func-name-matching: error
  func-names: error
  max-depth: error
  max-lines:
    - error
    - max: 500
  max-lines-per-function: error
  max-nested-callbacks: error
  max-statements-per-line: error
  multiline-comment-style: [error, separate-lines]
  new-parens: error
  no-bitwise: error
  no-lonely-if: error
  no-multi-assign: error
  no-multiple-empty-lines: error
  no-negated-condition: error
  no-nested-ternary: error
  no-new-object: error
  no-plusplus: error
  no-unneeded-ternary: error
  one-var-declaration-per-line: error
  operator-assignment: error
  prefer-exponentiation-operator: error
  prefer-object-spread: error

  sort-keys:
    - error
    - asc
    - caseSensitive: false

  sort-vars: error

  # ECMAScript 6
  # These rules relate to ES6, also known as ES2015:
  no-confusing-arrow: error
  no-new-symbol: error
  no-useless-computed-key: error
  no-useless-rename: error
  no-var: error
  object-shorthand: error
  prefer-arrow-callback: error
  prefer-const: error
  prefer-destructuring: error
  prefer-numeric-literals: error
  prefer-rest-params: error
  prefer-spread: error
  symbol-description: error

  # "@typescript-eslint/strict-boolean-expressions": error
  '@typescript-eslint/consistent-type-imports': error
  '@typescript-eslint/explicit-member-accessibility': error
  '@typescript-eslint/explicit-module-boundary-types': off
  '@typescript-eslint/member-delimiter-style': error
  '@typescript-eslint/member-ordering': error
  '@typescript-eslint/method-signature-style': error

  '@typescript-eslint/naming-convention':
    - error

    - selector: [memberLike, method]
      format: [camelCase]
      leadingUnderscore: forbid
      trailingUnderscore: forbid

    - selector: property
      format: [camelCase]
      leadingUnderscore: allow
      trailingUnderscore: forbid

    - selector: variable
      format: [camelCase]
      leadingUnderscore: forbid
      trailingUnderscore: forbid

    - selector: [variable, function, class, enum]
      # I think I have to give this a useless filter so it has higher
      # specificity than the rule above it.
      filter:
        regex: ^$
        match: false
      format: [PascalCase]
      modifiers: [exported]
      leadingUnderscore: forbid
      trailingUnderscore: forbid

    - selector: variable
      modifiers: [destructured]
      format: null

    - selector: [property, parameterProperty, accessor]
      format: [camelCase]
      modifiers: [private]
      # I seem to be the only person on earth who still likes leading
      # underscores on private properties, so I guess this will be one
      # of the first things to go. C'est la vie.
      leadingUnderscore: require
      trailingUnderscore: forbid

    - selector: [property, parameterProperty, accessor]
      format: [camelCase]
      modifiers: [protected]
      leadingUnderscore: require
      trailingUnderscore: forbid

    - selector: interface
      format: [PascalCase]
      prefix: ['I']
      leadingUnderscore: forbid
      trailingUnderscore: forbid

    - selector: [typeLike, enumMember]
      format: [PascalCase]

    - selector: property
      modifiers: [public, static, readonly]
      format: [PascalCase]

  '@typescript-eslint/no-implicit-any-catch': error
  '@typescript-eslint/no-require-imports': error
  '@typescript-eslint/no-unnecessary-qualifier': error
  '@typescript-eslint/prefer-enum-initializers': error
  '@typescript-eslint/prefer-readonly': error
  '@typescript-eslint/promise-function-async': error
  '@typescript-eslint/require-array-sort-compare': error
  '@typescript-eslint/sort-type-union-intersection-members': error
  '@typescript-eslint/switch-exhaustiveness-check': error
  '@typescript-eslint/typedef': error

  # This rule is turned on by one of the recommended base sets,
  # but it conflicts with @typescript-eslint/promise-function-async,
  # and also yields false positives when (for instance), an interface
  # requires a method to return a Promise, but the implementation
  # method doesn't actually need to await anything.
  '@typescript-eslint/require-await': off

  '@typescript-eslint/restrict-template-expressions':
    - error
    - allowNumber: true
      allowBoolean: true

  # TypeScript rules that extend core ESLint rules
  '@typescript-eslint/default-param-last': error
  '@typescript-eslint/no-invalid-this': error
  '@typescript-eslint/no-loop-func': error
  '@typescript-eslint/no-unused-expressions': error
  '@typescript-eslint/return-await': error
  '@typescript-eslint/semi': error

  no-dupe-class-members: off
  '@typescript-eslint/no-dupe-class-members': error

  no-redeclare: off
  '@typescript-eslint/no-redeclare': error

  '@typescript-eslint/no-magic-numbers':
    - error
    - ignore: [-1, 0, 1, 2]
      ignoreDefaultValues: true
      ignoreEnums: true
      ignoreReadonlyClassProperties: true
      ignoreTypeIndexes: true
