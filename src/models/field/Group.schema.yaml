type: object

description: The Group field allows you to create a group of multiple fields.

allOf: [$ref: './StandardField.schema.yaml']

required: [data_type, schema]

properties:
  data_type: { const: group }

  schema:
    type: array
    items:
      type: object
      oneOf:
        - $ref: './Boolean.schema.yaml'
        - $ref: './Date.schema.yaml'
        - $ref: './Extension.schema.yaml'
        - $ref: './File.schema.yaml'
        - $ref: './Global.schema.yaml'
        - $ref: './HtmlRte.schema.yaml'
        - $ref: './JsonRte.schema.yaml'
        - $ref: './Link.schema.yaml'
        - $ref: './Markdown.schema.yaml'
        - $ref: './Number.schema.yaml'
        - $ref: './Reference.schema.yaml'
        - $ref: './Select.schema.yaml'
        - $ref: './TextBox.schema.yaml'

        # Note: Group is also allowed here by Contentstack, but including
        # it currently causes an error in json2ts because of the circular
        # reference. I think this is related to:
        # https://github.com/bcherny/json-schema-to-typescript/issues/482
        # - $ref: './Group.schema.yaml'

examples:
  - data_type: group
    display_name: Group
    field_metadata: {}
    schema:
      - data_type: text
        display_name: Single line textbox
        uid: single_line
        field_metadata:
          description: ''
          default_value: ''
        format: ''
        error_messages: { format: '' }
        multiple: false
        mandatory: false
        unique: false
    uid: group
    multiple: true
    mandatory: false
    unique: false
